package com.csc413.sfsu.csc413_parking;

import java.util.LinkedList;

/** The SFParkQuery class is responsible for the creation and storage of a database query for the SFPark Availability REST Service API.
 * The query generated by the class is in the form of a URL which is passed to the SFPark endpoint;
 * the query is automatically formatted by the class per the SFPark Availability REST Service API documentation.
 * Official documentation can be found at the SFPark website: www.sfpark.org
 *
 * @author  Jeremy Erickson
 */
public class SFParkQuery {
    /** The endpoint URL of the SFPark Availability REST Service API */
    private static final String ENDPOINT = "http://api.sfpark.org/sfpark/rest/availabilityservice";
    /** Represents the query to be used */
    private String query;
    /** Stores all the current parameters added to the query */
    private LinkedList<Tuple<String, String>> params;

    /** Updates the contents of the query.
     * Called after any alteration of the parameters.
     */
    private void updateQuery () {
        query = ENDPOINT + "?";
        for (int i = 0; i < params.size(); i++) {
            query += (createParam(params.get(i)) + (i < params.size()-1? "&" : ""));
        }
    }

    /** Creates a correctly-formatted parameter for appending to the query.
     * The Tuple object passed to this method holds the parameter name and value
     * as its first and second item, respectively.
     *
     * @param   param   a Tuple instance holding two Strings (a parameter name and a value)
     * @return  a String containing the correctly-formatted paramter
     */
    private String createParam (Tuple<String, String> param) {
        return param.first() + "=" + param.last();
    }

    /** Constructor.
     */
    public SFParkQuery() {
        params = new LinkedList<Tuple<String, String>>();
        updateQuery();
    }

    /** Appends a new paramter to the query.
     * The parameter needs two pieces of data: a parameter name and a corresponding value.
     *
     * @param   arg a String holding the parameter name
     * @param   val a String holidng the parameter value
     */
    public void addParameter (String arg, String val) {
        params.add(new Tuple<String, String>(arg, val));
        updateQuery();
    }

    /** Removes a parameter from the query.
     * Since parameter names are unique in the query, only this information is needed to determine if the parameter exists.
     *
     * @param   arg a String holding the parameter name
     * @return  true if the parameter is found and removed, false otherwise
     */
    public boolean removeParameter (String arg) {
        for (int i = 0; i < params.size(); i++) {
            if (params.get(i).first().equals(arg)) {
                params.remove(i);
                updateQuery();
                return true;
            }
        }
        return false;
    }

    @Override
    public String toString () {
        return query;
    }

    /** The Tuple class represents a simple pair of non-mapped objects.
     * Objects may either be of the same or separate classes.
     *
     * @author  Jeremy Erickson
     */
    private class Tuple <X, Y> {
        /** Represents the first item in the pair. */
        private X first;
        /** Represents the last item in the pair. */
        private Y last;

        /** Constructor
         *
         * @param   first   an object of class X as the first item in the pair
         * @param   last    an object of class Y as the second item in the pair
         */
        public Tuple (X first, Y last) {
            this.first = first;
            this.last = last;
        }

        // ACCESSORS

        /** Returns the first item in the pair.
         *
         * @return  first
         */
        public X first () {
            return first;
        }
        /** Returns the last item in the pair.
         *
         * @return  last
         */
        public Y last () {
            return last;
        }

        // MUTATORS

        /** Sets the value for the first item in the pair.
         *
         * @param   newFirst    an object of class X
         */
        public void setFirst (X newFirst) {
            first = newFirst;
        }
        /** Sets the value for the last item in the pair.
         *
         * @param   newLast an object of class Y
         */
        public void setLast (Y newLast) {
            last = newLast;
        }

        @Override
        public String toString () {
            return "(" + first.toString() + "," + last.toString() + ")";
        }
    }
}

